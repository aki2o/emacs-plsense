(require 'plsense)
(require 'el-expectations)

(expectations
  (desc "display-help-buffer create help buffer")
  (expect 1
    (stub plsense--ready-p => t)
    (stub plsense--set-current-file => t)
    (stub plsense--set-current-package => t)
    (stub plsense--set-current-method => t)
    (stub plsense--get-source-for-help => "")
    (stub plsense--get-server-response => "hoge")
    (let ((before (loop for buff in (buffer-list)
                        count (string-match "^\\*plsense help\\*" (buffer-name buff))))
          (after (progn (plsense-display-help-buffer)
                        (loop for buff in (buffer-list)
                              count (string-match "^\\*plsense help\\*" (buffer-name buff))))))
      (- after before)))
  (desc "display-help-buffer create other help buffer")
  (expect 1
    (stub plsense--ready-p => t)
    (stub plsense--set-current-file => t)
    (stub plsense--set-current-package => t)
    (stub plsense--set-current-method => t)
    (stub plsense--get-source-for-help => "")
    (stub plsense--get-server-response => "hoge")
    (let ((before (loop for buff in (buffer-list)
                        count (string-match "^\\*plsense help\\*" (buffer-name buff))))
          (after (progn (plsense-display-help-buffer)
                        (loop for buff in (buffer-list)
                              count (string-match "^\\*plsense help\\*" (buffer-name buff))))))
      (- after before)))
  (desc "delete-help-buffer delete all help buffer")
  (expect 0
    (plsense-delete-help-buffer)
    (loop for buff in (buffer-list)
          count (string-match "^\\*plsense help\\*" (buffer-name buff))))
  )

