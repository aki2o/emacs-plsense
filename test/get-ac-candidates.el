(require 'plsense)
(require 'el-expectations)
(require 'tenv)

(expectations
  (desc "get-ac-candidates get assist")
  (expect '("Hoge" "Fuga")
    (let ((src (tenv-get-tmp-file "plsense" "test" t t)))
      (setq plsense--last-assist-start-point 0)
      (setq plsense--last-assist-end-point 0)
      (stub plsense--try-to-ready => nil)
      (stub plsense--ready-p => t)
      (stub plsense--set-current-file => t)
      (stub plsense--set-current-package => t)
      (stub plsense--set-current-method => t)
      (stub plsense--get-server-response => "Hoge\nFuga\n")
      (with-current-buffer (find-file-noselect src)
        (goto-char (point-max))
        (insert (concat "package Hoge;\n"
                        "# my hoge class\n"
                        "use strict;\n"
                        "sub get_hoge {\n"
                        "  my $self = shift;\n"
                        "  "))
        (search-backward "strict" nil t)
        (forward-char 2)
        (plsense--get-ac-candidates))))
  (desc "get-ac-candidates use last assist")
  (expect '("Hoge" "Fuga")
    (let ((src (tenv-get-tmp-file "plsense" "test")))
      (stub plsense--try-to-ready => nil)
      (stub plsense--ready-p => t)
      (stub plsense--set-current-file => t)
      (stub plsense--set-current-package => t)
      (stub plsense--set-current-method => t)
      (stub plsense--get-server-response => "Foo\nBar\n")
      (with-current-buffer (find-file-noselect src)
        (forward-char 1)
        (plsense--get-ac-candidates))))
  (desc "get-ac-candidates get new assist when backward")
  (expect '("Foo" "Bar")
    (let ((src (tenv-get-tmp-file "plsense" "test")))
      (stub plsense--try-to-ready => nil)
      (stub plsense--ready-p => t)
      (stub plsense--set-current-file => t)
      (stub plsense--set-current-package => t)
      (stub plsense--set-current-method => t)
      (stub plsense--get-server-response => "Foo\nBar\n")
      (with-current-buffer (find-file-noselect src)
        (forward-char -2)
        (plsense--get-ac-candidates))))
  )


